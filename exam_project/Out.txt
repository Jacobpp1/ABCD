------------------- Testing implementation of integration method -------------------
Testing integration method on f(x)=2x+x*x from 0 to 5. Delta and epsilon set to 1e-3. N=10
Theoretically we expect to get x*x + 1/3*x*x*x, evaluated gives: 25+1/3*125=66.6666666666667. Integration method gives: 66.6611819048526
Integrating with delta and epsilon 1e-5 and N=40 instead gives 66.6666546733002, which is an improvement

Now integrating 1/sqrt(x) from 0 to 1. But this diverges so I use Clenshaw-Curtis transformation instead
We expect this to give 2. With delta and eps = 1e-3 and N=10 again we get: 1.99846876804727
Testing integration on sin(x)exp(-x*x+x)*x from 0 to pi, delta and eps = 1e-7 and N=40 gives 1.06862189174693
Should give 1.068621813 according to WolframAlpha. So this is pretty good.

------------- Investigating dependence on number of new points thrown / optimum N -----------------
Figure showing number of function calls versus number of new points in an iteration are plotted. Both as absolute and relative number of calls.
Absolute number of calls can be seen in 'func_calls.svg', while relative (N_calls/N) can be seen in 'opt_N.svg'
Number of iterations versus number of new points is shown in 'iterations.svg' along with number of function calls;
these are of course correlated, since each iteration leads to two function calls per point because of the subdivision.
In all cases, the integral is cos(x-1)*sin(x); integrated from -PI to PI with delta and epsilon both being 1e-3

From the figure showing number of iterations, we see that somewhere between N=30 and N=40 we get diminishing returns, this may be considered an optimum N.
Similar is also seen in figure 'opt_N.svg', showing function calls divided by N.
The difference is not significant, though, and thus N=10 has been chosen for other calculations unless specified.

Surprisingly, the method of error calculation using the difference in mean leads to large variation in the integral value,
and therefore this is not considered a viable method

------------- Comparison with method from integration homework, using predefined nodes -----------------
Integrating 1/sqrt(x) from 0 to 1 with CC transformation. Cannot solve diverging integral without the transformation.
Should give 2. Integration methods give Random nodes: {test2}; Predefined nodes: {test4}
Doing it 100 times and taking average difference, Abs(integrate(f) - 2)
Random nodes: 0.000957560653539613; Predefined nodes: 7.98953567748839E-06
So precision isn't increased with random nodes method. Maybe number of function calls is.

Average number of function calls: Random nodes: 855.4; Predefined nodes: 16
So we also see that the efficiency in number of function calls is much better for the predefined nodes method.

Now with f(x)=1/sqrt(x), integrating from 1e-6 to 1.
Integration limit changed to allow the method without CC transform to work
so we can see if the CC transformation decreases function calls for divergent functions.
Number of function calls: Random nodes: 1050; Random nodes (without CC transform): 3550; Predefined nodes: 16
Still better to use predefined nodes, but the CC transform has a significant effect.
So for divergent functions, the CC transform has fewer function calls, while it makes more function calls for simpler functions (see 'func_calls.svg')
